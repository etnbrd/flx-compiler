{
  var context = {};

}


start
  = program

program
  = flx:fluxion ES? program? {return context}

fluxion
  = dec:declaration ES outputs:outputs {return context[dec] = {outputs: outputs}}

declaration
  = Flx WS name:name {return name}

outputs
  = o:output os:(ES o:output {return o})* {os.unshift(o); return os}
  / emptyOutput;

output
  = ln:link ES sign:signature {ln.signature = sign; return ln}

emptyOutput
  = arrow WS Empty {}

link 
  = type:arrow WS name:name {return {type: type, name: name}}

signature
  = Ls ids:identifiers? Rs {return ids || []}

identifiers
  = id:Identifier ids:(Sep id:Identifier {return id})* {ids.unshift(id); return ids}

code
  = CodeBlock (link code)? {}

name
  = id:Identifier {return id};


arrow
  = Start {return "start"}
  / Post  {return "post"};


CodeBlock
  = .*

Flx
  = 'flx';

Empty
  = 'ø' // fallback '#';

Start
  = '↠' // fallback '>>';

Post
  = '→' // fallback '->';

Identifier "identifier"
  = alpha:[a-z]+ {return alpha.join('');}


Sep
  = ',' WS?;

Ls "Left separator"
  = '[';

Rs "Right separator"
  = ']';

EL "Empty Line"
  = LT WS LT;

ES "Empty Space"
  = (LT / WS) ES?;

LT "Line return"
  = "\n"+
			
WS "White space"
  = " "+



